diff --git a/configure.in b/configure.in
index ae866ff..d296980 100644
--- a/configure.in
+++ b/configure.in
@@ -1629,6 +1629,33 @@ AC_HELP_STRING([--enable-video-rpi], [use Raspberry Pi video driver [[default=ye
     fi
 }
 
+CheckFBCON()
+{
+    AC_ARG_ENABLE(video-fbcon,
+AC_HELP_STRING([--enable-video-fbcon], [use Linux framebuffer console video driver [[default=yes]]]),
+                  , enable_video_fbcon=yes)
+    if test x$enable_video = xyes -a x$enable_video_fbcon = xyes; then
+        AC_MSG_CHECKING(for Linux frambuffer console)
+        have_video_fbcon=no
+        AC_TRY_LINK([
+          #include <linux/fb.h>
+        ],[
+          void *d;
+          ioctl(0, FBIOGET_VSCREENINFO, d);
+        ],[
+        have_video_fbcon=yes
+        ],[
+        ])
+        AC_MSG_RESULT($have_video_fbcon)
+
+        if test x$have_video_fbcon = xyes; then
+            SOURCES="$SOURCES $srcdir/src/video/fbcon/*.c"
+            AC_DEFINE(SDL_VIDEO_DRIVER_FBCON, 1, [ ])
+            SUMMARY_video="${SUMMARY_video} fbcon"
+        fi
+    fi
+}
+
 dnl Find the X11 include and library directories
 CheckX11()
 {
@@ -3421,6 +3448,7 @@ case "$host" in
         CheckRPI
         CheckX11
         CheckDirectFB
+        CheckFBCON
         CheckKMSDRM
         CheckOpenGLX11
         CheckOpenGLESX11
diff --git a/include/SDL_config.h.in b/include/SDL_config.h.in
index 883b6f4..4cfc4a1 100644
--- a/include/SDL_config.h.in
+++ b/include/SDL_config.h.in
@@ -319,6 +319,7 @@
 #undef SDL_VIDEO_DRIVER_COCOA
 #undef SDL_VIDEO_DRIVER_DIRECTFB
 #undef SDL_VIDEO_DRIVER_DIRECTFB_DYNAMIC
+#undef SDL_VIDEO_DRIVER_FBCON
 #undef SDL_VIDEO_DRIVER_DUMMY
 #undef SDL_VIDEO_DRIVER_WINDOWS
 #undef SDL_VIDEO_DRIVER_WAYLAND
diff --git a/mytest.c b/mytest.c
new file mode 100644
index 0000000..fc30d08
--- /dev/null
+++ b/mytest.c
@@ -0,0 +1,66 @@
+#include <stdio.h>
+#include <SDL.h>
+#include <time.h>
+
+// gcc -o mytest -Iinclude mytest.c build/.libs/libSDL2.a -lSDL2_image -lm -lpthread -ldl
+int main(int argc, char **argv)
+{
+    int quit;
+    int w, h;
+    SDL_Event event;
+    SDL_Window *window;
+    SDL_Renderer *renderer;
+    SDL_Surface *surface;
+    SDL_Texture *image;
+    SDL_Rect dest;
+
+    if (SDL_Init(SDL_INIT_VIDEO) < 0)
+    {
+        fprintf(stderr, "SDL_Init(), %s\n", SDL_GetError());
+        return 1;
+    }
+
+    if (SDL_CreateWindowAndRenderer(320, 240, SDL_WINDOW_FULLSCREEN_DESKTOP, &window, &renderer) != 0)
+    {
+        fprintf(stderr, "SDL_CreateWindowAndRenderer(), %s\n", SDL_GetError());
+        return 1;
+    }
+    SDL_GetWindowSize(window, &w, &h);
+
+    surface = IMG_Load("/tmp/ps1.png"); 
+    image = SDL_CreateTextureFromSurface(renderer, surface);
+    dest.x = (w/2) - (surface->w/2);
+    dest.y = (h/2) - (surface->h/2);
+    dest.w = surface->w;
+    dest.h = surface->h;
+    SDL_FreeSurface(surface);
+    
+    quit = 0;
+    while(!quit)
+    {
+        while(SDL_PollEvent(&event))
+        {
+            if (event.type == SDL_KEYDOWN)
+            {
+                SDL_QuitEvent e;
+                e.type = SDL_QUIT;
+                e.timestamp = time(NULL);
+                SDL_PushEvent((SDL_Event*)&e);
+            }
+            else if (event.type == SDL_QUIT)
+            {
+                quit = 1;
+            }
+        }
+
+        SDL_SetRenderDrawColor(renderer, 0xff, 0xff, 0xff, 0xff);
+        SDL_RenderClear(renderer);
+
+        /* render image center on screen */
+        SDL_RenderCopy(renderer, image, NULL, &dest);
+
+        SDL_RenderPresent(renderer);
+    }
+
+    return 0;
+}
\ No newline at end of file
diff --git a/src/video/SDL_sysvideo.h b/src/video/SDL_sysvideo.h
index 25862ca..e3f172d 100644
--- a/src/video/SDL_sysvideo.h
+++ b/src/video/SDL_sysvideo.h
@@ -407,6 +407,7 @@ extern VideoBootStrap COCOA_bootstrap;
 extern VideoBootStrap X11_bootstrap;
 extern VideoBootStrap MIR_bootstrap;
 extern VideoBootStrap DirectFB_bootstrap;
+extern VideoBootStrap FBCON_bootstrap;
 extern VideoBootStrap WINDOWS_bootstrap;
 extern VideoBootStrap WINRT_bootstrap;
 extern VideoBootStrap HAIKU_bootstrap;
diff --git a/src/video/SDL_video.c b/src/video/SDL_video.c
index 336fdaa..8f5cc69 100644
--- a/src/video/SDL_video.c
+++ b/src/video/SDL_video.c
@@ -76,6 +76,9 @@ static VideoBootStrap *bootstrap[] = {
 #if SDL_VIDEO_DRIVER_DIRECTFB
     &DirectFB_bootstrap,
 #endif
+#if SDL_VIDEO_DRIVER_FBCON
+    &FBCON_bootstrap,
+#endif
 #if SDL_VIDEO_DRIVER_WINDOWS
     &WINDOWS_bootstrap,
 #endif
diff --git a/src/video/fbcon/SDL_fbconevents.c b/src/video/fbcon/SDL_fbconevents.c
new file mode 100644
index 0000000..48fc0e0
--- /dev/null
+++ b/src/video/fbcon/SDL_fbconevents.c
@@ -0,0 +1,45 @@
+/*
+  Simple DirectMedia Layer
+  Copyright (C) 2019 Henrik Andersson <henrik.4e@gmail.com>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+
+#include "../../SDL_internal.h"
+
+#if SDL_VIDEO_DRIVER_FBCON
+
+#include "../../events/SDL_sysevents.h"
+#include "../../events/SDL_events_c.h"
+#include "../../events/SDL_keyboard_c.h"
+#include "SDL_fbconvideo.h"
+#include "SDL_fbconevents.h"
+
+#ifdef SDL_INPUT_LINUXEV
+#include "../../core/linux/SDL_evdev.h"
+#endif
+
+void FBCON_PumpEvents(_THIS)
+{
+#ifdef SDL_INPUT_LINUXEV
+    SDL_EVDEV_Poll();
+#endif
+    
+}
+
+#endif /* SDL_VIDEO_DRIVER_FBCON */
+
diff --git a/src/video/fbcon/SDL_fbconevents.h b/src/video/fbcon/SDL_fbconevents.h
new file mode 100644
index 0000000..8917b91
--- /dev/null
+++ b/src/video/fbcon/SDL_fbconevents.h
@@ -0,0 +1,31 @@
+/*
+  Simple DirectMedia Layer
+  Copyright (C) 2019 Henirk Andersson <henrik.4e@gmail.com>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+
+#ifndef SDL_fbconevents_h_
+#define SDL_fbconevents_h_
+
+#include "SDL_fbconvideo.h"
+
+void FBCON_PumpEvents(_THIS);
+void FBCON_EventInit(_THIS);
+void FBCON_EventQuit(_THIS);
+
+#endif /* SDL_fbconevents_h_ */
diff --git a/src/video/fbcon/SDL_fbconvideo.c b/src/video/fbcon/SDL_fbconvideo.c
new file mode 100644
index 0000000..332943a
--- /dev/null
+++ b/src/video/fbcon/SDL_fbconvideo.c
@@ -0,0 +1,404 @@
+/*
+  Simple DirectMedia Layer
+  Copyright (C) 2019 Henrik Andersson <henrik.4e@gmail.com>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+  to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+
+#include "../../SDL_internal.h"
+
+#if SDL_VIDEO_DRIVER_FBCON
+
+/* SDL internals */
+#include "../SDL_sysvideo.h"
+#include "SDL_version.h"
+#include "SDL_syswm.h"
+#include "SDL_loadso.h"
+#include "SDL_events.h"
+#include "../../events/SDL_mouse_c.h"
+#include "../../events/SDL_keyboard_c.h"
+#include "SDL_hints.h"
+
+#ifdef SDL_INPUT_LINUXEV
+#include "../../core/linux/SDL_evdev.h"
+#endif
+
+/* fbcon declarations */
+#include "SDL_fbconvideo.h"
+#include "SDL_fbconevents.h"
+
+static int
+FBCON_Available(void)
+{
+    return 1;
+}
+
+static void
+FBCON_Destroy(SDL_VideoDevice * device)
+{
+    SDL_free(device->driverdata);
+    SDL_free(device);
+}
+
+static SDL_VideoDevice *
+FBCON_CreateDevice()
+{
+    SDL_VideoDevice *device;
+    SDL_VideoData *data;
+
+    device = (SDL_VideoDevice *) SDL_calloc(1, sizeof(SDL_VideoDevice));
+    if (device == NULL) {
+        SDL_OutOfMemory();
+        return NULL;
+    }
+
+    data = (SDL_VideoData *) SDL_calloc(1, sizeof(SDL_VideoData));
+    if (data == NULL) {
+        SDL_OutOfMemory();
+        SDL_free(device);
+        return NULL;
+    }
+
+    device->driverdata = data;
+    device->num_displays = 0;
+    device->free = FBCON_Destroy;
+
+    device->VideoInit = FBCON_VideoInit;
+    device->VideoQuit = FBCON_VideoQuit;
+    device->SetDisplayMode = FBCON_SetDisplayMode;
+#if 1
+    device->GetDisplayModes = FBCON_GetDisplayModes;
+    device->CreateSDLWindow = FBCON_CreateWindow;
+    device->CreateSDLWindowFrom = FBCON_CreateWindowFrom;
+    device->SetWindowTitle = FBCON_SetWindowTitle;
+    device->SetWindowIcon = FBCON_SetWindowIcon;
+    device->SetWindowPosition = FBCON_SetWindowPosition;
+    device->SetWindowSize = FBCON_SetWindowSize;
+    device->ShowWindow = FBCON_ShowWindow;
+    device->HideWindow = FBCON_HideWindow;
+    device->DestroyWindow = FBCON_DestroyWindow;
+#endif
+    device->CreateWindowFramebuffer = FBCON_CreateWindowFramebuffer;
+    device->UpdateWindowFramebuffer = FBCON_UpdateWindowFramebuffer;
+    device->DestroyWindowFramebuffer = FBCON_DestroyWindowFramebuffer;
+
+    device->PumpEvents = FBCON_PumpEvents;
+
+    return device;
+}
+
+VideoBootStrap FBCON_bootstrap = {
+    "fbcon",
+    "Linux framebuffer Console Video Driver",
+    FBCON_Available,
+    FBCON_CreateDevice
+};
+
+int
+FBCON_VideoInit(_THIS)
+{
+    SDL_VideoDisplay display;
+    SDL_DisplayData *data;
+    SDL_DisplayMode current_mode;
+    int fd;
+    const char *fbdev;
+    Uint8 *framebuffer;
+    struct fb_var_screeninfo vinfo;
+    struct fb_fix_screeninfo finfo;
+
+    fbdev = getenv("SDL_FBDEV");
+    if (fbdev == NULL)
+    {
+        fbdev = getenv("FRAMEBUFFER");
+        if (fbdev == NULL)
+            fbdev = "/dev/fb0";
+    }
+
+    fd = open("/dev/tty1", O_RDWR);
+    ioctl(fd, KDSETMODE, KD_GRAPHICS);
+    close(fd);
+
+    fd = open(fbdev, O_RDWR);
+    if (fd < 0)
+    {
+        return SDL_SetError("failed to open framebuffer device");
+    }
+
+    if (ioctl(fd, FBIOGET_FSCREENINFO, &finfo) != 0)
+    {
+        close(fd);
+        return SDL_SetError("failed to get frambuffer fixed screen information");
+    }
+
+    if (ioctl(fd, FBIOGET_VSCREENINFO, &vinfo) != 0)
+    {
+        close(fd);
+        return SDL_SetError("failed to get frambuffer variable screen information");
+    }
+
+    framebuffer = (Uint8*)mmap(0, finfo.smem_len, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
+    if (framebuffer == MAP_FAILED)
+    {
+        close(fd);
+        return SDL_SetError("failed to get map frambuffer to memory");
+    }
+
+    current_mode.w = vinfo.xres;
+    current_mode.h = vinfo.yres;
+    current_mode.refresh_rate = 60;
+    current_mode.format = SDL_PIXELFORMAT_RGBX8888;
+    current_mode.driverdata = NULL;
+
+    SDL_zero(display);
+    display.desktop_mode = current_mode;
+    display.current_mode = current_mode;
+
+    /* Allocate display internal data */
+    data = (SDL_DisplayData *) SDL_calloc(1, sizeof(SDL_DisplayData));
+    if (data == NULL)
+    {
+        return SDL_OutOfMemory();
+    }
+
+    data->fd = fd;
+    data->vinfo = vinfo;
+    data->finfo = finfo;
+    data->framebuffer = framebuffer;
+    display.driverdata = data;
+    fprintf(stderr, "VideoInit: Framebuffer %p\n", data->framebuffer);
+
+    SDL_AddVideoDisplay(&display);
+
+#ifdef SDL_INPUT_LINUXEV
+    if (SDL_EVDEV_Init() < 0)
+    {
+        return -1;
+    }
+#endif
+
+    return 0;
+}
+
+void
+FBCON_VideoQuit(_THIS)
+{
+    int fd;
+    SDL_DisplayData *data = (SDL_DisplayData *) _this->driverdata;
+    munmap(data->framebuffer, data->finfo.smem_len);
+    close(data->fd);
+
+    fd = open("/dev/tty", O_RDWR);
+    ioctl(fd, VT_ACTIVATE, 0);
+    ioctl(fd, VT_ACTIVATE, 1);
+    ioctl(fd, VT_ACTIVATE, 2);
+    close(fd);
+
+    fd = open("/dev/tty1", O_RDWR);
+    ioctl(fd, KDSETMODE, KD_TEXT);
+    close(fd);
+
+    data->fd = -1;
+    data->framebuffer = NULL;
+#ifdef SDL_INPUT_LINUXEV
+    SDL_EVDEV_Quit();
+#endif
+}
+
+void
+FBCON_GetDisplayModes(_THIS, SDL_VideoDisplay * display)
+{
+    /* Only one display mode available, the current one */
+    SDL_AddDisplayMode(display, &display->current_mode);
+}
+
+int
+FBCON_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode)
+{
+    return 0;
+}
+
+int
+FBCON_CreateWindow(_THIS, SDL_Window * window)
+{
+    SDL_WindowData *data;
+    SDL_VideoDisplay *display;
+
+    /* Allocate window internal data */
+    data = (SDL_WindowData *) SDL_calloc(1, sizeof(SDL_WindowData));
+    if (data == NULL) {
+        return SDL_OutOfMemory();
+    }
+
+    display = SDL_GetDisplayForWindow(window);
+    window->w = display->desktop_mode.w;
+    window->h = display->desktop_mode.h;
+    window->driverdata = data;
+
+    /* One window, it always has focus */
+    SDL_SetMouseFocus(window);
+    SDL_SetKeyboardFocus(window);
+
+    return 0;
+}
+
+void
+FBCON_DestroyWindow(_THIS, SDL_Window * window)
+{
+    SDL_WindowData *data = (SDL_WindowData *) window->driverdata;
+
+    if(data) {
+	    SDL_free(data);
+        window->driverdata = NULL;
+    }
+}
+
+int
+FBCON_CreateWindowFrom(_THIS, SDL_Window * window, const void *data)
+{
+    return -1;
+}
+
+void
+FBCON_SetWindowTitle(_THIS, SDL_Window * window)
+{
+}
+
+void
+FBCON_SetWindowIcon(_THIS, SDL_Window * window, SDL_Surface * icon)
+{
+}
+
+void
+FBCON_SetWindowPosition(_THIS, SDL_Window * window)
+{
+}
+
+void
+FBCON_SetWindowSize(_THIS, SDL_Window * window)
+{
+}
+
+void
+FBCON_ShowWindow(_THIS, SDL_Window * window)
+{
+}
+
+void
+FBCON_HideWindow(_THIS, SDL_Window * window)
+{
+}
+
+void
+FBCON_RaiseWindow(_THIS, SDL_Window * window)
+{
+}
+
+void
+FBCON_MaximizeWindow(_THIS, SDL_Window * window)
+{
+}
+
+void
+FBCON_MinimizeWindow(_THIS, SDL_Window * window)
+{
+}
+
+void
+FBCON_RestoreWindow(_THIS, SDL_Window * window)
+{
+}
+
+void
+FBCON_SetWindowGrab(_THIS, SDL_Window * window, SDL_bool grabbed)
+{
+
+}
+
+#define FBCON_SURFACE "_fbcon_framebuffer_surface"
+int FBCON_CreateWindowFramebuffer(_THIS, SDL_Window * window, Uint32 * format, void ** pixels, int *pitch)
+{
+    SDL_Surface *surface;
+    const Uint32 surface_format = SDL_PIXELFORMAT_RGB888;
+    int w, h;
+    int bpp;
+    Uint32 Rmask, Gmask, Bmask, Amask;
+
+    /* Free the old framebuffer surface */
+    surface = (SDL_Surface *) SDL_GetWindowData(window, FBCON_SURFACE);
+    SDL_FreeSurface(surface);
+
+    /* Create a new one */
+    SDL_PixelFormatEnumToMasks(surface_format, &bpp, &Rmask, &Gmask, &Bmask, &Amask);
+    SDL_GetWindowSize(window, &w, &h);
+    fprintf(stderr,"Creating window framebuffer surface size %dx%d\n",w,h);
+    surface = SDL_CreateRGBSurface(0, w, h, bpp, Rmask, Gmask, Bmask, Amask);
+    if (!surface) {
+        return -1;
+    }
+
+    /* Save the info and return! */
+    SDL_SetWindowData(window, FBCON_SURFACE, surface);
+    *format = surface_format;
+    *pixels = surface->pixels;
+    *pitch = surface->pitch;
+    return 0;
+}
+
+int FBCON_UpdateWindowFramebuffer(_THIS, SDL_Window * window, const SDL_Rect * rects, int numrects)
+{
+    int w, h, stride_width, row;
+    Uint8 *psrc,*pdst;
+    SDL_Surface *surface;
+    SDL_VideoDisplay *display;
+    SDL_DisplayData *data;
+
+    surface = (SDL_Surface *) SDL_GetWindowData(window, FBCON_SURFACE);
+    if (!surface) {
+        return SDL_SetError("Couldn't find fbcon surface for window");
+    }
+
+    /* TODO: Implement double buffering, SDL1.2 used a buffer with the
+       double height the of current display. Then when flipping FBIOPAN_DISPLAY
+       is used for setting y offset to the second buffer.
+    */
+
+    display = SDL_GetDisplayForWindow(window);
+    data = display->driverdata;
+
+    SDL_GetWindowSize(window, &w, &h);
+    psrc = surface->pixels;
+    pdst = data->framebuffer;
+    stride_width = w * 4;
+    for (row = 0; row < h; row++)
+    {
+        memcpy(pdst, psrc, stride_width);
+        psrc += surface->pitch;
+        pdst += stride_width;
+    }
+
+    return 0;
+}
+
+void FBCON_DestroyWindowFramebuffer(_THIS, SDL_Window * window)
+{
+    SDL_Surface *surface;
+
+    surface = (SDL_Surface *) SDL_SetWindowData(window, FBCON_SURFACE, NULL);
+    SDL_FreeSurface(surface);
+}
+#endif /* SDL_VIDEO_DRIVER_FBCON */
+
+/* vi: set ts=4 sw=4 expandtab: */
diff --git a/src/video/fbcon/SDL_fbconvideo.h b/src/video/fbcon/SDL_fbconvideo.h
new file mode 100644
index 0000000..b66f6cb
--- /dev/null
+++ b/src/video/fbcon/SDL_fbconvideo.h
@@ -0,0 +1,87 @@
+/*
+  Simple DirectMedia Layer
+  Copyright (C) 2019 Henrik Andersson <henrik.4e@gmail.com>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+
+#ifndef __SDL_FBCONVIDEO_H__
+#define __SDL_FBCONVIDEO_H__
+
+#include "../../SDL_internal.h"
+#include "../SDL_sysvideo.h"
+
+#include <stdio.h>
+#include <sys/fcntl.h>
+#include <sys/ioctl.h>
+#include <linux/fb.h>
+#include <linux/vt.h>
+#include <linux/kd.h>
+#include <sys/mman.h>
+#include <unistd.h>
+
+typedef struct SDL_VideoData
+{
+} SDL_VideoData;
+
+
+typedef struct SDL_DisplayData
+{
+   int fd;
+   struct fb_var_screeninfo vinfo;
+   struct fb_fix_screeninfo finfo;
+   Uint8 *framebuffer;
+} SDL_DisplayData;
+
+
+typedef struct SDL_WindowData
+{
+} SDL_WindowData;
+
+
+/****************************************************************************/
+/* SDL_VideoDevice functions declaration                                    */
+/****************************************************************************/
+
+/* Display and window functions */
+int FBCON_VideoInit(_THIS);
+void FBCON_VideoQuit(_THIS);
+void FBCON_GetDisplayModes(_THIS, SDL_VideoDisplay * display);
+int FBCON_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode);
+int FBCON_CreateWindow(_THIS, SDL_Window * window);
+int FBCON_CreateWindowFrom(_THIS, SDL_Window * window, const void *data);
+void FBCON_SetWindowTitle(_THIS, SDL_Window * window);
+void FBCON_SetWindowIcon(_THIS, SDL_Window * window, SDL_Surface * icon);
+void FBCON_SetWindowPosition(_THIS, SDL_Window * window);
+void FBCON_SetWindowSize(_THIS, SDL_Window * window);
+void FBCON_ShowWindow(_THIS, SDL_Window * window);
+void FBCON_HideWindow(_THIS, SDL_Window * window);
+void FBCON_RaiseWindow(_THIS, SDL_Window * window);
+void FBCON_MaximizeWindow(_THIS, SDL_Window * window);
+void FBCON_MinimizeWindow(_THIS, SDL_Window * window);
+void FBCON_RestoreWindow(_THIS, SDL_Window * window);
+void FBCON_SetWindowGrab(_THIS, SDL_Window * window, SDL_bool grabbed);
+void FBCON_DestroyWindow(_THIS, SDL_Window * window);
+
+
+int FBCON_CreateWindowFramebuffer(_THIS, SDL_Window * window, Uint32 * format, void ** pixels, int *pitch);
+int FBCON_UpdateWindowFramebuffer(_THIS, SDL_Window * window, const SDL_Rect * rects, int numrects);
+void FBCON_DestroyWindowFramebuffer(_THIS, SDL_Window * window);
+
+#endif /* __SDL_FBCONVIDEO_H__ */
+
+/* vi: set ts=4 sw=4 expandtab: */
